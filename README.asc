:toc: macro
:toc-title: Contents
:toclevels: 3
:experimental:

= Automated Release

image:https://img.shields.io/travis/com/rcmoutinho/automated-release.svg[Travis (.com)] image:https://img.shields.io/github/release/rcmoutinho/automated-release.svg[GitHub release] image:https://img.shields.io/github/issues/rcmoutinho/automated-release.svg[GitHub issues] image:https://img.shields.io/github/license/rcmoutinho/automated-release.svg[GitHub License]

Put your version control in autopilot and create good looking releases.

Don't waste time on every release searching what has changed on your software or on how to build a meaningful file for each version so your clients can see what's new. Only having https://nodejs.org/en/download/package-manager/[Node.js], you can handle all the release process in any OS. Just works!

And with the good help of https://www.docker.com/[Docker] (and Docker Compose), avoid some extra installations. Node.js will be mandatory because at the moment there is no good looking way to define Node.js path pointing to a container, and respecting cross-platform compatibility. The right path is necessary due to the Git hooks. For now, installing Node.js locally would be a better alternative. But, if you know a way to improve this code to avoid Node.js favoring the use of Docker, please, open an issue or submit a pull request. Your help is welcome!

And if you are using GitHub, make everything work on an automated way with https://travis-ci.com/[Travis-CI] (using a single file!).

Now commits like `Fixed a little bug...`, `i dunno, maybe this works` or `TODO: write meaningful commit message` will all be blocked by the _conventional commits_ rules. By the way, funny suggestions from https://whatthecommit.com[this site].

image::images/funny-commits.png[Funny Commits]

toc::[]

== Principles to apply to your project

* Now every commit needs to respect the pattern of https://www.conventionalcommits.org[conventional commits]. See below how to configure your local development to follow the commit rules quickly.

* Create a main streamline development branch, like `dev`, `develop` (my favorite) or `development`, and make `master` as a _read-only_ branch. +
All commits to `master` will be done by merges and/or Pull Requests. So every time this operation happen, an automatic release will be generated according to the latest commits. +
This magic will happen with the help from another project, https://github.com/semantic-release/semantic-release[semantic-release], that will analyze all your most recent commits and create your next release number. Everything fully automated.
+
[NOTE]
--
Avoid creating multiple branches that may lead you to painful merge problems. The side branch development is to favor the automated release. Consider as a `trunk`/`master` development strategy where everyone commits on the same branch, following DevOps culture.

Following this pattern, you need to merge this side branch when you need to generate a new release, avoiding a new version after every commit on the `master` branch.

See more on semantic-release documentation about https://github.com/semantic-release/semantic-release/blob/master/README.md#triggering-a-release[_Triggering a release_].
--

== Forking / Cloning this project

There are two ways to get the advantages of this automation: forking or cloning the project.

* *Forking* the project you will create an _upstream_ on the original project and be able to get the upcoming updates. *_This is optional_*, considering that this automation won't change much in the future, but your own project and automation.

* *Cloning* the project and erasing all Git information to start a new project or copy the essential files to your existing project.

*IMPORTANT:* Most of the files from this project are mandatory to your project become automated. Read the following sections to understand more about it.

=== Starting from scratch

* Clone this project
* Delete the `.git` folder

Now you can start a new git project with `git init` or copy all the files to your own project. See the following section to avoid copying useless files.

If you are going to merge the configuration with your existing project, take a closer look on the values `"husky"`, `"scripts"`, `"commitlint"`, `"config"` and `"devDependencies"` on `package.json` that will be one of the main configuration to your project.

=== Deleting meaningless files to your project

Files like `README.asc`, `LICENSE.asc` and `CHANGELOG.md` aren't necessary for your project. And also the `images` folder. So feel free to get rid of them.

== Getting Started

Basically, you will need two main steps to get your project ready. First, configure your local tools like Node.js and Docker. Second, configure your automation server. In this case, Travis CI, that it's free to any Open Source project at GitHub.

=== Local Configuration

Here we have the first mandatory installation. Before running the first command, you will need to install Node.js on your local machine. For now, there is no way to avoid this due to the Git hooks project configuration. Download and install following https://nodejs.org/en/download/[this guide]. I would recommend you to https://nodejs.org/en/download/package-manager/[install via a package manager] from your OS.

After installation, you will have `node` and also `npm`. Execute the following command:

```
npm i
```

Great! Now everything will be installed based on the `package.json` file.

Now if you execute `npm run commit`, you will get help to create all your commits using conventional commits pattern. It's necessary to add all the needed files before this step. This one was only to have fun. You can abort using kbd:[CTRL + C].

image::images/npm-run-commit.png[npm run commit]

=== Project Configuration

You may want to update `package.json` configuration file to fit your project. Here it is the main changes you need to do:

* `"author"` -> Your name.
* `"name"` -> Project's name.
* `"description"` -> Project description.
* `"license"` -> Project license.
* `"repository"` -> Repository info.
* `"bugs"` -> Place to report bugs.
* `"homepage"` -> Project homepage.
* `"keywords"` -> Keywords related to the project.

Another file that is important to the project is the `changelog.config.js`. This will be the helper that will guide all the commits from the project. It's a sharable configuration so that all contributors will use the same rules. The basic config is following the https://github.com/streamich/git-cz#custom-config[default configuration] adding some scopes related to this current project. But there are other ways to style the commits, like the https://github.com/atom/atom/blob/master/CONTRIBUTING.md#git-commit-messages[atom project]. Change on the way you want to feat to your needs.

Here are some changed configurations, like the scope section:

.before
```
"scopes": [],
```

.after
```
"scopes": [
    "",
    "readme",
    "core"
],
```

The empty `scope` is to favor commits that don't have a related scope. And by the way, `scope` values *must* be lowercase.

==== Release

The file `.releaserc` is the base configuration to make semantic-release work. The order of the values is extremely important and also what kind of values is set.

For example, on this default configuration, the is no value defining a way to upload Node files to the NPM repository, that could be done if it's needed.

This is only the bases to create an automated release. Adjust and customize everything you need to make your project better and faster.

[#docker]
=== Docker (help!)

Some of the following installations can be prevented using Docker if you want. This project has a folder `docker` that will handle all the `Dockerfile` for each scenario, separated by folders.

There is also a `docker-compose.yml` on the root folder to avoid typing _docker_ endless commands and configurations every time you need.

All configurations aim the minimum maintenance. So there is no need to create and maintain networks and volumes, only build the required image to run the desired task, once! To make it happen, use the following pattern on the upcoming configurations.

----
docker-compose run --rm <docker-compose-service> <desired-command>
----

Using the command `run`, docker will take care to build the image using `Dockerfile` from the _service_ before running the container. And by using `--rm`, the container will be removed after completing the task, that would be your _desired command_.

The unique "garbage", would be the docker image created by the service(s), that you can get rid with the following command.

CAUTION: This command will remove all the images, volumes and networks related to this docker-compose configuration.

----
docker-compose down --rmi local
----

==== Travis-cli Example

To test out your _Docker_ configuration, try to get _travis-cli_ usage help, that will build your local image.

----
docker-compose run --rm travis
----

----
Building travis
Step 1/8 : FROM ruby:alpine
 ---> 47c30d96ab20
Step 2/8 : RUN apk --update add build-base git &&     gem install travis &&     apk del build-base &&    rm -rf /var/cache/apk/* &&     rm -rf /tmp/* &&     mkdir project
 ---> Running in 2d482c14e6b8
fetch http://dl-cdn.alpinelinux.org/alpine/v3.10/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.10/community/x86_64/APKINDEX.tar.gz
(1/20) Installing binutils (2.32-r0)
(2/20) Installing libmagic (5.37-r0)
(3/20) Installing file (5.37-r0)

# ... long output about the installation process

(14/15) Purging mpc1 (1.1.0-r0)
(15/15) Purging mpfr3 (3.1.5-r1)
Executing busybox-1.30.1-r2.trigger
OK: 41 MiB in 42 packages
Removing intermediate container 2d482c14e6b8
 ---> fd08f2977d8f
Step 3/8 : WORKDIR project
 ---> Running in bfc75aa1c5de
Removing intermediate container bfc75aa1c5de
 ---> a769e4a966d4
Step 4/8 : VOLUME ["/project"]
 ---> Running in 7e3f5bdd4173
Removing intermediate container 7e3f5bdd4173
 ---> 2fa3df896941
Step 5/8 : LABEL maintainer="twitter.com/rcmoutinho"
 ---> Running in 04f572851ead
Removing intermediate container 04f572851ead
 ---> 01dc6cd43af6
Step 6/8 : LABEL description="Travis CLI in a docker container"
 ---> Running in 97caa05dc91a
Removing intermediate container 97caa05dc91a
 ---> 18d847d29914
Step 7/8 : ENTRYPOINT ["travis"]
 ---> Running in 1a80dce439d6
Removing intermediate container 1a80dce439d6
 ---> de2d5710f27d
Step 8/8 : CMD ["--help"]
 ---> Running in a007ae5bfb89
Removing intermediate container a007ae5bfb89
 ---> 7343790c9b2c
Successfully built 7343790c9b2c
Successfully tagged automated-release_travis:latest
WARNING: Image for service travis was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
Usage: travis COMMAND ...

Available commands:

	accounts       displays accounts and their subscription status
	branches       displays the most recent build for each branch

# ... long command list
----

Or the following command that will run the `version` command. This time the execution would be wayyyyy faster (almost instantaneous) because the docker image already exists.

----
docker-compose run --rm travis version
----

----
1.8.10
----

The `docker-compose` service is configured with the name `travis`. But all the magic happens because the `Dockerfile` is configured with the _entrypoint_ `travis`. So that's why you just need to type the command you need because the configuration already expects it.

==== Docker-compose on development mode

In the case that your project already has a `docker-compose.yml` or something related, you can rename this project configuration to `docker-compose.dev.yml` or `docker-compose.version.yml` to make sure your automated release configuration won't affect your project. But remember that this change will request an extra parameter on your _compose_ commands. Let's use _Travis_ as an example:

----
COMPOSE_FILE=docker-compose.dev.yml docker-compose run --rm travis
----

You will need to specify the `COMPOSE_FILE` environment variable because the only command that accepts a different file as a parameter is the `docker-compose up`. So to run this configuration without worrying too much, you will need this _[.line-through]#hack#_ workaround.

=== GitHub

First, you will need to generate an API token from GitHub. According to the https://github.com/semantic-release/cli#what-it-does[semantic-version documentation] (see step 3), the https://github.com/settings/tokens[GitHub Access Token] needs the following permissions: _repo, read:org, repo:status, repo_deployment, user:email, write:repo_hook_.

The step-by-step process is fully documented in this https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line[GitHub article].

image::images/github-select-scopes.png[GitHub Access Token - Select scopes]

Define a name like "_automatic releases for rcmoutinho/automated-release_", select the scopes and generate the token. The result will be displayed on the screen *only once*! Something like this:

```
myTokenWithLotsOfNumbersAndLetters123456
```

image::images/personal-access-tokens.png[GitHub - Personal access tokens]

Great! Save this value and treat it as a [.underline]#*_very important password!_*# Seriously! It will be used to configure the `$GITHUB_TOKEN` for Travis CI automation.

For now, we are good with the GitHub configuration.

NOTE: *TODO!* Find a way to transform this step into an automated one! Sorry about this manual step for now :(

=== Travis CI

Considering that you are going to use the same project configuration for Travis CI, `.travis.yml`, you will only need to remove the secure variable used by this project and configure yours.

[source,yml]
```
# ...
env:
  global:
    secure: <ENCRYPTED_TOKEN>
# ...
```

To ease this process, let's use the Travis CLI. Check https://github.com/travis-ci/travis.rb#installation[this documentation] to see the specific installation to your OS.

[IMPORTANT]
--
You can avoid all the local Travis CLI installation using Docker. See more on the link:#docker[previous section] about the docker configuration.

All the configuration is located on this project at `docker/travis/Dockerfile` and `docker-compose.yml`.

Remember that if you want to use docker on the following configuration, you will need to replace all the `travis` commands with the `docker-compose` command. So the first step would be like:

----
docker-compose run --rm travis login --com
----

You can create a Linux script to emulate this command but this compose command is a cross-platform solution easy to understand.
--

. Make sure you are on the root of the project. This is important to get some Git configuration during the process.

. https://github.com/travis-ci/travis.rb#login[Login] using the travis CLI using your GitHub credentials.
+
```
travis login --com
```

. Enable the GitHub project on Travis CI.
+
```
travis enable
```
+
NOTE: Don't need to execute `init` because we already have the project configuration defined.

. Encrypt the GitHub token.
+
```
travis encrypt GITHUB_TOKEN="myTokenWithLotsOfNumbersAndLetters123456" --repo username/project-name --com --add
```
* The `--repo` parameter is optional. The CLI will try to suggest considering the git remote configuration.
+
```
Detected repository as rcmoutinho/automated-release, is this correct? |yes|
```
* More about Travis CI encryption process, https://docs.travis-ci.com/user/encryption-keys/[here].
* More about _semantic-release_ authentication needs, https://semantic-release.gitbook.io/semantic-release/usage/ci-configuration#authentication[here].

. Check your `.travis.yml` to see your new encrypted value.

That's it! Now your project has a fully automated version releases control.

TIP: All this process could be avoided using the https://github.com/semantic-release/cli#semantic-release-cli[_semantic-release-cli setup_], but this isn't a project that we need to upload to npm registry. That's why all this specific configuration is necessary to skip npm configuration.

== Deeper on the code!

On the following sections, there are extra configurations and explanation about the project.

=== Productive Commits

* `npm run commit` -> This is the main command to commit your changes using the pattern of conventional commits.
* `git cz` -> Configure a git command, on a project level to avoid conflicts, to ease the use of this pattern. Behind the scenes, it will call the same npm command.
+
.unix/linux
```
git config --local alias.cz '!npm run commit'
```
+
.windows (just need double quotes instead of single quotes)
```
git config --local alias.cz "!npm run commit"
```
+
..git/config (local project configuration)
```
[alias]
	cz = !npm run commit
```
+
If you set this configuration as global, you will need this node script configuration on any project you create.

=== Travis Builds and New Releases

Don't worry about pushing more than one commit to the branch watched by Travis (probably `master`) at the same time. It will only trigger a new build considering the last commit of this batch, as it's shown on the following image, with two _feature_ commits on the same release.

image::images/github-commits-release.png[GitHub Commits and Release]

_semantic-release_ triggers new releases analyzing commits with _feat_, _fix_, _perf_ or _breaking change_. If you want to know more how does it works, check this https://github.com/semantic-release/semantic-release/blob/master/docs/support/FAQ.md#how-can-i-change-the-type-of-commits-that-trigger-a-release[great explanation on their docs].

=== git-cz

Quick tips on how to get the best of this library. Let's follow each step after a `git-cz` (or `npm run commit`):

* Select the type according to the options.
+
```
? Select the type of change that you're committing:
```
* _[optional]_ Defines the scope, if there are available options on the project's configuration.
+
```
? Select the scope this component affects:
```
* Write your best message with the remaining space. This will be the message shown on the release notes. So it's essential to be a meaningful message to the developer (and maybe the user).
+
```
? Write a short, imperative mood description of the change:`
[-------------------------------------------------------------] 55 chars left
<type>[(<scope>)]:
```
* _[optional]_ Time to write everything you need that makes easier to understand the changes made on this commit. Do your best. And also, if you wanna just to refer an issue on GitHub, do it here with the `#<number>`. The next step will automatically close the issue.
+
```
? Provide a longer description of the change:
```
* _[optional]_ Is this commit breaks the software compatibility? So it's time to write why it's happened. This step will force a new major release on the next automated build on `master`.
+
```
? List any breaking changes
  BREAKING CHANGE:
```
* _[optional]_ Just put the `#<number>` of the issue that this commit will close, if it's applicable.
+
```
? Issues this commit closes, e.g #123: #2
```

== Customizations

* https://github.com/semantic-release/git#configuration[How to change the Git user associated with the Git credentials]

== References

* https://medium.com/@kevinkreuzer/the-way-to-fully-automated-releases-in-open-source-projects-44c015f38fd6[The way to fully automated releases in open source projects] +
    An awesome article that inspired this project. The author also created a project, https://github.com/kreuzerk/node-command-line-starter[node-command-line-starter], but more focused on automating the deploy packages to npm repository.

* Main GitHub Projects
** https://github.com/streamich/git-cz[git-cz] -> Semantic Git commits
** https://github.com/semantic-release/semantic-release[semantic-release] -> Fully automated version management and package publishing

* Travis-CLI _Dockerfile_ references: https://hub.docker.com/r/skandyla/travis-cli/dockerfile[[1\]] https://github.com/lirantal/docker-travis-cli/blob/master/Dockerfile[[2\]]

* Countless StackOverflow pages :stuck_out_tongue_winking_eye: :laughing:

== License

MIT License
2019 © Rodrigo Moutinho and https://github.com/rcmoutinho/automated-release/cli/graphs/contributors[contributors]
